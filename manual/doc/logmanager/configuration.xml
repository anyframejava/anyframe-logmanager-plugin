	<chapter id="logmanager_configuration">
		<title>Configuration</title>
		<para>
			Anyframe Log Manager와 연동하는 것 별도의 추가 코딩 없이 간단한 설정만으로 가능하다.
			Log Manager에서 제공하는 기능 중 로그 조회 기능을 사용하기 위해서는 로그 저장소로 사용되는 Mongodb에 로그를 저장해야 하므로
			log4j.xml 파일에 Appender와 layout을 추가 정의해야한다.
			
			또한, 로그 레벨 변경 기능은 WAS의 재기동없이 log4j.xml 파일을 reload 해야하므로 web.xml 파일에 MDCServletFilter를 정의해 준다. 
			이 밖에도 MDCServletFilter를 통해 프로젝트에서 정의한 Custom Data에 대해서 로그를 남길 수 있다. 
		</para>
		<section id="logmanager_configuration_log4j"><title>log4j.xml</title>
			<para>먼저, Anyframe Log Manager는 로그 저장소로 MongoDB를 사용하므로 Legacy Application에서도 
			마찬가지로 로그 저장소로 MongoDB를 사용해야한다. 이를 위해 Log4j.xml 파일에 log4mongo에서 제공하는 MongoDbAppender를
			확장한 org.anyframe.logmanager.log4mongo.MongoDbPatternLayoutAppender를 정의한다. 이 때, MongoDB와의 연결
			정보를 정의하기 위해 아래와 같은 Parameter를 제공하며 정의하지 않을 시 Default Value로 등록된다. 
			</para>
		<informaltable>
			<tgroup cols="4">
				<colspec colnum="1" colname="col1" colwidth="5*" />
				<colspec colnum="2" colname="col2" colwidth="5*" />
				<thead>
					<row>
						<entry align="center">Name</entry>
						<entry align="center">Default Value</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry align="center">hostname</entry>
						<entry align="center">localhost</entry>
					</row>
					<row>
						<entry align="center">port</entry>
						<entry align="center">27017</entry>
					</row>
					<row>
						<entry align="center">databaseName</entry>
						<entry align="center">log4mongo</entry>
					</row>
					<row>
						<entry align="center">collectionName</entry>
						<entry align="center">log</entry>
					</row>
					<row>
						<entry align="center">userName</entry>
						<entry align="center">undefined</entry>
					</row>
					<row>
						<entry align="center">password</entry>
						<entry align="center">undefined</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
		<para>다음은 Anyframe Log Manager Plugin에서 정의한 log4j.xml 파일의 MongoDbPatternLayoutAppender 정의 부분의 일부이다. </para>
			<programlisting language="xml"><![CDATA[<appender class="org.anyframe.logmanager.log4mongo.MongoDbPatternLayoutAppender" name="mongodb">
	<param name="hostname" value="localhost"/>
	<param name="port" value="27017"/>
	<param name="databaseName" value="logs"/>
	<param name="collectionName" value="moviefinderlogs"/>
	<param name="userName" value="admin"/>
	<param name="password" value="admin00"/>
</appender>]]></programlisting>
		<para>log4j.xml에 정의되어 있는 logger의 appener 값을 위에서 정의한 appender의 name인 "mongodb"로 지정해 주면 
		Property의 연결 정보를 기반으로 해당 MongoDB에 로그를 남길 수 있다. </para>
		<programlisting language="xml"><![CDATA[<logger additivity="false" name="org.anyframe.plugin.logmanager">	
    <level value="DEBUG"/>
    ]]><emphasis role="bold"><![CDATA[<appender-ref ref="mongodb"/>]]></emphasis><![CDATA[
</logger>]]></programlisting>
		<para>이 때, 어떠한 형태로 로그를 남길 것인지에 대해 layout을 정의해 줘야 한다. layout class는 
		org.log4mongo.MongoDbPatternLayout을 확장한 
		org.anyframe.logmanager.log4mongo.MongoDbPatternLayout을 지정하며 ConversionPattern을 사용하여 "key:value" 쌍의 JSON document 형태를 사용한다. </para>
		<programlisting language="xml"><![CDATA[<appender class="org.anyframe.logmanager.log4mongo.MongoDbPatternLayoutAppender" name="mongodb">
	<layout class="org.anyframe.logmanager.log4mongo.MongoDbPatternLayout">
		<param name="ConversionPattern" value="level:%p,thread:%t,message:%m,className:%C,methodName:%M,lineNumber:%L"/>
	</layout>
	<param... />
</appender>]]></programlisting>
	<para>패턴 정의 방법은 일반적인 Log4j의 패턴을 사용할 때와 같다.</para>
	</section>
	<section id="logmanager_configuration_webxml">
	<title>web.xml</title>
				<para>Anyframe Log Manager에서는 로그 조회 기능 뿐만 아니라 로그 정책을 변경 할 수 있는 기능을 제공한다.
				다시 말해서 Legacy Application의 log4j.xml 파일을 읽어와 로그 레벨을 변경 할 수 있다. 이 때, WAS 재기동 없이
				변경된 로그 정책에 대해 적용시킬 수 있다. 이 또한, MDCServletFilter를 통해 해당 기능을 수행할 수 있다. 설정할 수 있는 속성들은 아래와 같다.
				</para>
				<informaltable>
						<tgroup cols="4">
							<colspec colnum="1" colname="col1" colwidth="3*" />
							<colspec colnum="2" colname="col2" colwidth="5*" />
							<colspec colnum="3" colname="col3" colwidth="2*" />
							<thead>
								<row>
									<entry align="center">Name</entry>
									<entry>Description</entry>
									<entry align="center">Default Value</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="center">log4jFile</entry>
									<entry>log4j 설정 파일의 이름</entry>
									<entry align="center">log4j.xml</entry>
								</row>
								<row>
									<entry align="center">log4jDynamicReload</entry>
									<entry>log4j.xml 파일의 Dynamic Reload 여부</entry>
									<entry align="center">true</entry>
								</row>
								<row>
									<entry align="center">log4jDynamicReloadPeriod</entry>
									<entry>log4j.xml 파일의 변경을 체크하는 주기(milliseconds)</entry>
									<entry align="center">60000</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>다은은 위에서 설명한 log4j.xml 파일의 Dynamic Reloading을 위해 설정한 MDCServletFilter의 정의 부분이다.</para>
					<programlisting language="xml"><![CDATA[<filter>
	<filter-name>MDCServletFilter</filter-name>
	<filter-class>org.anyframe.logmanager.web.filter.MDCServletFilter</filter-class>
	]]><emphasis role="bold"><![CDATA[<init-param>
		<param-name>log4jFile</param-name>
		<param-value>log4j.xml</param-value>
	</init-param>
	<init-param>
		<param-name>log4jDynamicReload</param-name>
		<param-value>true</param-value>
	</init-param>
	<init-param>
		<param-name>log4jDynamicReloadPeriod</param-name>
		<param-value>60000</param-value>
	</init-param>]]></emphasis><![CDATA[
</filter>]]></programlisting>
					<para>위와 같이 정의 하면 log4j.xml이라는 이름의 파일에 대해 1분 주기로 변경을 체크하게 된다.</para>
					<note>
						<title>Spring의 Log4jConfigListener</title>
						<para>Spring에서는 log4j.xml 파일의 Dynamic Reloading 기능을 제공하기 위해 Log4jConfigListener를 제공한다. 위에서 설명한 MDCServletFilter를 통한 Dynamic Reloding도 가능하지만
						Spring 기반의 Application일 경우 Spring의 Log4jConfigListener를 정의하여 적용하도록 한다.</para>
						<programlisting language="xml"><![CDATA[<web-app...>
	<listener>
	    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<context-param>
	    <param-name>log4jRefreshInterval</param-name>
	    <param-value>60000</param-value>
	</context-param>
	<context-param>
	    <param-name>log4jConfigLocation</param-name>
	    <param-value>classpath:log4j.xml</param-value>
	</context-param>
</web-app>]]></programlisting>
					<para>listener-class를 Log4jConfigListener로 정의하고 log4jConfigLocation으로 log4j.xml파일의 위치를,
				log4jRefreshInterval 속성을 정의함으로써 변경 체크 주기를 
				설정할 수 있다. 위의 코드처럼 설정할 경우 classpath의 log4j.xml에 대해 60초 주기로 변경을 체크하게 될 것이다. </para>
				</note>
		<para>일반적으로 Log4j를 사용하여 로그를 남길 때, Log4j에서 제공하는 %d, %p, %m등의 패턴을 통해서 날짜, 로그레벨, 메시지를 남길 수 있다.
		이 밖에, 프로젝트에서 로그로 남기고 싶은 정보가 있다면 web.xml 파일에 Anyframe의 MDCServletFilter의 sessionAttributes로 해당 데이터의 key 값을 정의하고 
		log4j.xml %X패턴을 정의하여 적용시킬 수 있다. </para>
		<programlisting language="xml"><![CDATA[<web-app..>
	<filter>
		<filter-name>MDCServletFilter</filter-name>
		<filter-class>org.anyframe.logmanager.web.filter.MDCServletFilter</filter-class>]]>
			<emphasis role="bold"><![CDATA[<init-param>
				<param-name>sessionAttributes</param-name>
				<param-value>userId</param-value>
			</init-param>]]></emphasis><![CDATA[
	</filter>
	<filter-mapping>
		<filter-name>MDCServletFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>]]></programlisting>
	<para>위와 같이 Filter를 정의하면 기본적으로 Application Name, Client IP, Server Name을 로그로 남길 수 있다. 이 때, log4j의 ConversionPattern에
	%X{key}를 사용하여 출력할 수 있으며 각각의 key값은 appName, clientIp, serverName이 된다. 다음은 이를 정의한 log4j.xml파일의 일부이다.</para>
	<programlisting language="xml"><![CDATA[<appender class="org.anyframe.logmanager.log4mongo.MongoDbPatternLayoutAppender" name="mongodb">
   	<layout class="org.anyframe.logmanager.log4mongo.MongoDbPatternLayout">
   		<param name="ConversionPattern" value="clientIp:%X{clientIp},serverId:%X{serverId},appName:%X{appName}"/>
   	</layout>
	<param .../>
</appender>]]></programlisting>
	<para>MDCServletFilter에서는 내부적으로 MDC를 통해 로그로 출력해줄 요소를 key, value쌍으로 put, remove하는 로직을 수행하고 있다.
	이는 log4j의 ConversionPattern에 %X{key}의 형태로 정의함으로써 MDC를 통해 ThreadLocal에 저장된 값을 로그로 출력할 수 있다.
	이미 MDCServletFilter에 의해 MDC에 저장된 appName, clientIp, serverName이외에 출력해야할 정보가 있다면 아래와 같이 설정해 줄 수 있다.</para>
	<itemizedlist>
		<listitem>
			<para>Http Session에 객체 저장</para>
			<para>로그로 출력해줄 데이터를 HttpSession에 저장한다. </para>
			<programlisting language="java"><![CDATA[@RequestMapping("/logmanagerLogin.do")
public String login(@Valid User user, BindingResult results, HttpSession session){
	if (results.hasErrors())
		return "/logmanager/login";
	]]><emphasis role="bold"><![CDATA[session.setAttribute("userId", user.getUserId());]]></emphasis><![CDATA[
	return "redirect:/logmanagerMovieFinder.do?method=list";
}]]></programlisting>
		</listitem>
		<listitem>
			<para>web.xml 파일을 열어 MDCServletFilter의 "sessionAttributes" parameter value로 MDC에 put 해줄 객체의 key 값을 정의해 준다.</para>
			<programlisting language="xml"><![CDATA[<web-app...>
	<filter>
		<filter-name>MDCServletFilter</filter-name>
		<filter-class>org.anyframe.logmanager.web.filter.MDCServletFilter</filter-class>
		]]><emphasis role="bold"><![CDATA[<init-param>
			<param-name>sessionAttributes</param-name>
			<param-value>userId</param-value>
		</init-param>]]></emphasis><![CDATA[
	</filter>
</web-app>]]></programlisting>
		<para>HttpSession에 저장되어있는 객체 중 여러개의 객체를 MDC에 put해줘야 한다면 구분자로 ","를 사용한다. 또한, 객체가 String이 아닌 
		멤버 변수의 getter와 setter를 가지는 도메인 객체이면 "."을 사용하여 해당 멤버 변수를 지정해 줄 수 있다.</para>
		<programlisting language="xml"><![CDATA[<web-app...>
	<filter>
		<filter-name>MDCServletFilter</filter-name>
		<filter-class>org.anyframe.logmanager.web.filter.MDCServletFilter</filter-class>
		]]><emphasis role="bold"><![CDATA[<init-param>
			<param-name>sessionAttributes</param-name>
			<param-value>user.userId,user.userName</param-value>
		</init-param>]]></emphasis><![CDATA[
	</filter>
</web-app>]]></programlisting>
		</listitem>
		<listitem>
			<para>MDC를 통해 ThreadLocal에 저장된 값을 mongodb를 통해 로그로 출력하기 위해 MongoDB Appender의 ConversionPattern에
			%X{key}를 사용하여 정의한다. </para>
			<programlisting language="xml"><![CDATA[<appender class="org.anyframe.logmanager.log4mongo.MongoDbPatternLayoutAppender" name="mongodb">
	<layout class="org.anyframe.logmanager.log4mongo.MongoDbPatternLayout">
		]]><emphasis role="bold"><![CDATA[<param name="ConversionPattern" value="userId:%X{userId}"/>]]></emphasis><![CDATA[
	</layout>
	<param ... />
</appender>]]></programlisting>
		</listitem>
	</itemizedlist>
		</section>
</chapter>